import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 5685631367

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫—É
users_in_request_mode = set()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
requests_stats = defaultdict(int)
user_requests = {}

# –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON
TON_WALLET_ADDRESS = "UQDIOasS2M_s8vvwt8XT7rduysajUwOwVgazra4rjXc8nIGp"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
builder = InlineKeyboardBuilder()
builder.button(text="üì∏ Instagram", url="https://www.instagram.com/a_eco_official")
builder.button(text="üì¶ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_request")
builder.button(text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more_info")
builder.button(text="‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", callback_data="support")
builder.adjust(1)
kb = builder.as_markup()

# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
support_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –≤ TON", url=f"https://t.me/wallet?start={TON_WALLET_ADDRESS}")],
    [InlineKeyboardButton(text="üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="send_receipt")]
])

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_stats")],
    [InlineKeyboardButton(text="üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏", callback_data="manage_requests")]
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_kb)
    else:
        await message.answer(
            "üåç –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å! –ú—ã - –∫–æ–º–ø–∞–Ω–∏—è A-ECO ‚ôª, –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–æ–π –ø–ª–∞—Å—Ç–∏–∫–∞!\n\n"
            "üì© –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–∞–∫–æ–ø–∏–ª—Å—è –ø–ª–∞—Å—Ç–∏–∫!\n\n"
            "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=kb
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: True)
async def handle_callback(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id

        if callback_query.data == "submit_request":
            users_in_request_mode.add(user_id)
            await callback_query.message.answer(
                "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: [–í–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ]\n"
                "üìç –ê–¥—Ä–µ—Å: [–í–∞—à –∞–¥—Ä–µ—Å]\n"
                "üìû –ù–æ–º–µ—Ä: [–í–∞—à –Ω–æ–º–µ—Ä]\n"
                "üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: [–í–∞—à–µ –≤—Ä–µ–º—è]\n"
                "üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Å—Ç–∏–∫–∞: [–í –º–µ—à–∫–∞—Ö –∏–ª–∏ —Ñ–æ—Ç–æ]"
            )
        elif callback_query.data == "more_info":
            await bot.send_message(
                user_id,
                "üîé –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
                "‚ôª *–ö–∞–∫–∏–µ –≤–∏–¥—ã –ø–ª–∞—Å—Ç–∏–∫–∞ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è?*\n"
                "–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –±—É—Ç—ã–ª–∫–∏. –≠—Ç–∏–∫–µ—Ç–∫–∏ –º–æ–∂–Ω–æ –Ω–µ —Å–Ω–∏–º–∞—Ç—å, –Ω–æ –∏—Ö —É–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–æ—Å—Ç–∏—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É!\n\n"
                "üóë *–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º—É—Å–æ—Ä?*\n"
                "1Ô∏è‚É£ –ü—Ä–æ–º—ã–≤–∞–π—Ç–µ –±—É—Ç—ã–ª–∫–∏ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π.\n"
                "2Ô∏è‚É£ –û—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫—Ä—ã—à–∫–∏ –Ω–∞ –±—É—Ç—ã–ª–∫–∞—Ö.\n"
                "3Ô∏è‚É£ –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –±—É—Ç—ã–ª–∫–∏ –ø–æ —Ü–≤–µ—Ç—É.\n\n"
                "üè≠ *–ö—É–¥–∞ –∏–¥—É—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã?*\n"
                "–ú—ã –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –±—É—Ç—ã–ª–∫–∏ –≤ –ø—Ä—É—Ç–æ–∫ –¥–ª—è 3D-–ø–µ—á–∞—Ç–∏. –ò–∑ –Ω–µ–≥–æ –º—ã —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è –∏ –ø—Ä–æ–¥–∞–µ–º –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n"
                "–¢–∞–∫–∂–µ –º—ã –ø–µ—á–∞—Ç–∞–µ–º –∏–∑–¥–µ–ª–∏—è –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É.\n\n"
                "‚ù§Ô∏è *–ù–∞—à–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã*\n"
                "–ú—ã –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–µ–º –≤ –∞–∫—Ü–∏—è—Ö –ø–æ —Å–±–æ—Ä—É –ø–ª–∞—Å—Ç–∏–∫–∞, –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∏–≥—Ä—É—à–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π –∏ –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã. –í–∞—à –≤–∫–ª–∞–¥ –ø–æ–º–æ–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä –ª—É—á—à–µ! üåçüíö"
            )
        elif callback_query.data == "support":
            await callback_query.message.answer("üôè –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—Å TON!", reply_markup=support_kb)
        elif callback_query.data == "view_stats" and user_id == ADMIN_ID:
            await callback_query.message.answer(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n–ü—Ä–∏–Ω—è—Ç–æ: {requests_stats['accepted']}\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {requests_stats['rejected']}"
            ) 

        elif callback_query.data == "support":
            await callback_query.message.answer("üôè –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—Å TON!", reply_markup=support_kb)
        elif callback_query.data == "view_stats" and user_id == ADMIN_ID:
            await callback_query.message.answer(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n–ü—Ä–∏–Ω—è—Ç–æ: {requests_stats['accepted']}\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {requests_stats['rejected']}"
            )
        elif callback_query.data == "manage_requests" and user_id == ADMIN_ID:
            if not user_requests:
                await callback_query.message.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
            else:
                for uid, req in user_requests.items():
                    await bot.send_message(
                        ADMIN_ID,
                        f"üì• –ó–∞—è–≤–∫–∞ –æ—Ç @{uid}:\n\n{req}",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üì© –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{uid}")],
                            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{uid}")]
                        ])
                    )
        elif callback_query.data.startswith("accept_") and user_id == ADMIN_ID:
            target_user_id = int(callback_query.data.split("_")[1])
            if target_user_id in user_requests:
                del user_requests[target_user_id]
                requests_stats["accepted"] += 1
                await bot.send_message(target_user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
        elif callback_query.data.startswith("reject_") and user_id == ADMIN_ID:
            target_user_id = int(callback_query.data.split("_")[1])
            if target_user_id in user_requests:
                del user_requests[target_user_id]
                requests_stats["rejected"] += 1
                await bot.send_message(target_user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(lambda msg: msg.from_user.id in users_in_request_mode)
async def handle_request(message: Message):
    user_id = message.from_user.id
    users_in_request_mode.discard(user_id)
    user_requests[user_id] = message.text
    username = message.from_user.username or f"ID: {user_id}"
    await bot.send_message(ADMIN_ID, f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{username}:\n\n{message.text}")
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —á–µ–∫–∞
@router.message(lambda message: message.photo)
async def handle_receipt_photo(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"ID: {user_id}"
    photo_id = message.photo[-1].file_id
    await bot.send_photo(ADMIN_ID, photo=photo_id, caption=f"üì© –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç @{username}.")
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
